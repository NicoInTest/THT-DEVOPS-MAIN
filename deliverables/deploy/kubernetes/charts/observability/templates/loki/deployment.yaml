apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ .Values.loki.name }}
  namespace: {{ .Values.namespaces.observability }}
  labels:
    app: {{ .Values.loki.name }}
    {{- if .Release.Name }}
    app.kubernetes.io/managed-by: {{ .Release.Service }}
    {{- end }}
spec:
  replicas: 1
  selector:
    matchLabels:
      app: {{ .Values.loki.name }}
  template:
    metadata:
      labels:
        app: {{ .Values.loki.name }}
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "{{ .Values.loki.service.port }}"
    spec:
      containers:
      - name: {{ .Values.loki.name }}
        image: "{{ .Values.loki.image.repository }}:{{ .Values.loki.image.tag }}"
        imagePullPolicy: {{ .Values.loki.image.pullPolicy }}
        ports:
        - containerPort: {{ .Values.loki.service.port }}
          name: http-loki
        args:
        - -config.file=/etc/loki/local-config.yaml
        volumeMounts:
        - name: loki-config
          mountPath: /etc/loki
        - name: loki-storage
          mountPath: /loki
        readinessProbe:
          httpGet:
            path: /ready
            port: {{ .Values.loki.service.port }}
          initialDelaySeconds: 30
          timeoutSeconds: 5
        livenessProbe:
          httpGet:
            path: /ready
            port: {{ .Values.loki.service.port }}
          initialDelaySeconds: 30
          timeoutSeconds: 5
        resources:
          requests:
            cpu: {{ .Values.loki.resources.requests.cpu }}
            memory: {{ .Values.loki.resources.requests.memory }}
          limits:
            cpu: {{ .Values.loki.resources.limits.cpu }}
            memory: {{ .Values.loki.resources.limits.memory }}
      volumes:
      - name: loki-config
        configMap:
          name: loki-config
      - name: loki-storage
        emptyDir: {} 